name: Linux

defaults:
  run:
    shell: bash

on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cxx:
          - g++-10
        configs: [Release, Debug]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies
        working-directory: ${{runner.workspace}}
        run: |
          sudo apt-get -y install libxrandr-dev
          sudo apt-get -y install libgl1-mesa-dev
          sudo apt-get -y install libudev-dev
          cd Cubiks/submodules/glbinding
          git apply ../../patches/0001-fix-removed-deploy-project-from-CMakeLists.txt.patch
          cd ../glm
          cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --config "Release" --parallel 4
          sudo cmake --build . --target install --config "Release"

      - name: Configure build
        working-directory: ${{runner.workspace}}
        env:
          CXX: ${{matrix.cxx}}
        run: |
          cmake -Bbuild -H$GITHUB_WORKSPACE \
                -DCMAKE_BUILD_TYPE=${{matrix.configs}} \
                -DCUBIKS_TESTS=ON

      - name: Build library & tests
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build . --config "${{matrix.configs}}" --parallel 4
          mkdir Cubiks_Linux_${{matrix.configs}}
          mkdir Cubiks_Linux_${{matrix.configs}}/binaries
          mkdir Cubiks_Linux_${{matrix.configs}}/libraries
          cp ../Cubiks/scripts/run.sh Cubiks_Linux_${{matrix.configs}}/.
          cp Cubiks Cubiks_Linux_${{matrix.configs}}/binaries/.
          cp submodules/**/*.so Cubiks_Linux_${{matrix.configs}}/libraries/.
          cp -R ../Cubiks/assets Cubiks_Linux_${{matrix.configs}}/.
          cp -R ../Cubiks/shaders Cubiks_Linux_${{matrix.configs}}/.

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        run: ./CubiksTests

      - name: Setup Valgrind
        run: sudo apt-get install -y valgrind

      - name: Check memory leaks
        working-directory: ${{runner.workspace}}/build
        run: valgrind --leak-check=full --error-exitcode=1 ./CubiksTests

      - name: Packing artifacts
        working-directory: ${{runner.workspace}}/build
        run: cmake -E tar cfv Cubiks_Linux_${{matrix.configs}}.zip --format=zip Cubiks_Linux_${{matrix.configs}}

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          path: ../build/Cubiks_Linux_${{matrix.configs}}.zip
          name: Cubiks_Linux_${{matrix.configs}}.zip

  # release:
  #   name: Release
  #   if: contains(github.ref, 'tags/v')
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Create release
  #       id: create_release
  #       uses: actions/create-release@v1.0.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  #     - name: Store release url
  #       run: |
  #         echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

  #     - uses: actions/upload-artifact@v1
  #       with:
  #         path: ./upload_url
  #         name: upload_url

  # publish:
  #   name: Publish
  #   if: contains(github.ref, 'tags/v')
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: Cubiks_Linux_Release.zip
  #         path: ./

  #     - name: Download url
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: upload_url
  #         path: ./

  #     - id: set_upload_url
  #       run: |
  #         upload_url=`cat ./upload_url`
  #         echo ::set-output name=upload_url::$upload_url

  #     - name: Upload to Release
  #       id: upload_to_release
  #       uses: actions/upload-release-asset@v1.0.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
  #         asset_path: ./Cubiks_Linux_Release.zip
  #         asset_name: Cubiks_Linux_Release.zip
  #         asset_content_type: application/zip

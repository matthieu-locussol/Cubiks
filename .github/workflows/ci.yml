name: Continuous integration

defaults:
  run:
    shell: bash

on: push

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Windows",
              artifact: "cubiks_windows.zip",
              os: "windows-latest",
              cc: "cl",
              cxx: "cl",
            }
          - {
              name: "Ubuntu",
              artifact: "cubiks_ubuntu.zip",
              os: "ubuntu-latest",
              cc: "gcc-10",
              cxx: "g++-10",
            }
          - {
              name: "MacOS",
              artifact: "cubiks_macos.zip",
              os: "macos-latest",
              cc: "clang",
              cxx: "clang++",
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
        if: ${{ matrix.config.name == "Windows" }}

      - name: Install dependencies (Ubuntu)
        working-directory: ${{runner.workspace}}
        if: ${{ matrix.config.name == "Ubuntu" }}
        run: |
          sudo apt-get -y install libxrandr-dev
          sudo apt-get -y install libgl1-mesa-dev
          sudo apt-get -y install libudev-dev

      - name: Install dependencies
        working-directory: ${{ runner.workspace }}
        run: |
          cd Cubiks/submodules/glbinding
          git apply ../../patches/0001-fix-removed-deploy-project-from-CMakeLists.txt.patch
          cd ../glm
          cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
          cd build
          cmake --build . --config "Release" --parallel 4
          cmake --build . --target install --config "Release"

      - name: Configure build
        working-directory: ${{ runner.workspace }}
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          cmake -Bbuild -H$GITHUB_WORKSPACE \
                -DCMAKE_BUILD_TYPE=Release \
                -DCUBIKS_TESTS=ON

      - name: Build library & tests (Windows)
        working-directory: ${{ runner.workspace }}/build
        if: ${{ matrix.config.name == "Windows" }}
        run: |
          cmake --build . --config "Release" --parallel 4
          mkdir Cubiks_Bundle
          cp Release/Cubiks.exe Cubiks_Bundle/.
          cp submodules/SFML/lib/Release/*.dll Cubiks_Bundle/.
          cp submodules/glbinding/Release/*.dll Cubiks_Bundle/.
          cp submodules/globjects/Release/*.dll Cubiks_Bundle/.
          cp -R ../Cubiks/assets Cubiks_Bundle/.
          cp -R ../Cubiks/shaders Cubiks_Bundle/.

      - name: Build library & tests (Ubuntu)
        working-directory: ${{ runner.workspace }}/build
        if: ${{ matrix.config.name == "Ubuntu" }}
        run: |
          cmake --build . --config "${{matrix.configs}}" --parallel 4
          mkdir Cubiks_Linux_${{matrix.configs}}
          mkdir Cubiks_Linux_${{matrix.configs}}/binaries
          mkdir Cubiks_Linux_${{matrix.configs}}/libraries
          cp ../Cubiks/scripts/run.sh Cubiks_Linux_${{matrix.configs}}/.
          cp Cubiks Cubiks_Linux_${{matrix.configs}}/binaries/.
          cp submodules/**/*.so Cubiks_Linux_${{matrix.configs}}/libraries/.
          cp -R ../Cubiks/assets Cubiks_Linux_${{matrix.configs}}/.
          cp -R ../Cubiks/shaders Cubiks_Linux_${{matrix.configs}}/.

      - name: Build library & tests (MacOS)
        working-directory: ${{runner.workspace}}/build
        if: ${{ matrix.config.name == "MacOS" }}
        run: |
          cmake --build . --config "${{matrix.configs}}" --parallel 4
          mkdir Cubiks_MacOS_${{matrix.configs}}
          mkdir Cubiks_MacOS_${{matrix.configs}}/binaries
          mkdir Cubiks_MacOS_${{matrix.configs}}/libraries
          cp ../Cubiks/scripts/run.sh Cubiks_MacOS_${{matrix.configs}}/.
          cp Cubiks Cubiks_MacOS_${{matrix.configs}}/binaries/.
          cp submodules/**/*.dylib Cubiks_MacOS_${{matrix.configs}}/libraries/.
          cp -R ../Cubiks/assets Cubiks_MacOS_${{matrix.configs}}/.
          cp -R ../Cubiks/shaders Cubiks_MacOS_${{matrix.configs}}/.

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        if: ${{ matrix.config.name == "Windows" }}
        run: .\\Release\\CubiksTests.exe

      - name: Run tests
        working-directory: ${{runner.workspace}}/build
        if: ${{ matrix.config.name != "Windows" }}
        run: ./CubiksTests

      - name: Packing artifacts
        working-directory: ${{runner.workspace}}/build
        run: cmake -E tar cfv ${{ matrix.config.artifact }} --format=zip Cubiks_Bundle

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          path: ../build/${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    name: Publish
    if: contains(github.ref, 'tags/v')
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { artifact: "cubiks_windows.zip", os: "windows-latest" }
          - { artifact: "cubiks_ubuntu.zip", os: "ubuntu-latest" }
          - { artifact: "cubiks_macos.zip", os: "macos-latest" }
    needs: release
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Download url
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./

      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/zip
